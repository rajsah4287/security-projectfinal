import React, { useState, useEffect } from "react";
import Places from "../components/Places";
import axios from "axios";
import Loader from "../components/Loader";
import { DatePicker } from 'antd';
import "antd/dist/reset.css";
import moment from "moment";
const { RangePicker } = DatePicker;


function PlaceScreen() {

    const [places, setPlaces] = useState([])
    const [loading, setLoading] = useState()
    const [error, setError] = useState()

    const [fromDate, setfromDate] = useState()
    const [toDate, settoDate] = useState()
    const [dubicateRooms, setdubicateRooms] = useState([]);

    useEffect(() => {
        async function fetchData() {
            try {
                setLoading(true)
                const data = (await axios.get('/api/places/getallplaces')).data;
                setdubicateRooms(data);
                setPlaces(data)
                setLoading(false)

            } catch (error) {
                setError(true)
                console.log(error);
                setLoading(false)
            }
        }

        fetchData();
    }, []);

    const filterByDate = (dates) => {
        if (!dates || !dates.length) {
            return;
        }
        const from = moment(dates[0].$d).format("DD-MM-YYYY");
        const to = moment(dates[1].$d).format("DD-MM-YYYY");
        setfromDate(from);
        settoDate(to);

        var tempRooms = [];
        var availability = false;
        for (const place of dubicateRooms) {
            if (place.currentbookings.length > 0) {
                for (const booking of place.currentbookings) {

                    if (!moment(from).isBetween(booking.fromDate, booking.toDate)
                        && !moment(to).isBetween(booking.fromDate, booking.toDate)
                    ) {
                        if (

                            from !== booking.fromDate &&
                            from !== booking.toDate &&
                            to !== booking.fromDate &&
                            to !== booking.toDate
                        ) {

                            availability = true

                        }
                    }

                }
            }
            if (availability == true || place.currentbookings.length == 0) {
                tempRooms.push(place)
            }
            setPlaces(tempRooms)
            
        }
    }

    return (
        <div className="container" >
            <div className="search" >
                <div className="date">
                    <div><RangePicker format="DD-MM-YYYY" onChange={filterByDate} /></div>
                </div>
                <br />
                <input className="bs" type="text" placeholder="search places" />
                <i className="fa-solid fa-magnifying-glass"></i>
            </div>

            <div className="row justify-content-center mt-5">
                {loading ? (
                    <Loader />
                ) : (
                    places.map((place) => {
                        return <div className="col-md-9 mt-2" key={place._id}>
                            <Places places={place} fromDate={fromDate} toDate={toDate} />
                        </div>
                    })
                )}
            </div>
            <br /><br />
        </div>


    )
}
export default PlaceScreen;